#include <fstream>
#include <iostream>
#include <limits>
#include <vector>
#include <PgmFileManager.hpp>

PgmFileManager::PgmFileManager(std::string& filename, unsigned long size):
filename{filename}, rows{size}, cols{size}
{}

PgmFileManager::PgmFileManager(std::string& filename):
filename{filename}
{
	std::ifstream instream(filename.c_str(), std::ios_base::binary);
	std::string magic;
	instream >> magic >> rows >> cols;
}

void PgmFileManager::write()
{
	const std::ofstream outstream{filename.c_str(), std::ios_base::binary | std::ios_base::trunc};
	outstream << "P5 " << cols << " " << rows << " " << PGM_MAX_VALUE << std::endl;

	PGM_HOLDER image{
		{
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}
		}
	};

	for (auto i = 0UL; i < rows; i++) {
		outstream.write(reinterpret_cast<const char*>(&image[i][0]), cols);
	}
}

PGM_HOLDER PgmFileManager::read()
{
	const std::ifstream instream(filename.c_str(), std::ios_base::binary);
	instream.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
	PGM_HOLDER image{rows, std::vector<unsigned char>(cols, 0)};
	for (auto i = 0UL; i < rows; i++) {
		instream.read(reinterpret_cast<char*>(&image[i][0]), cols);
	}
	return image;
}

unsigned long PgmFileManager::get_rows()
{
	return rows;
}

unsigned long PgmFileManager::get_cols()
{
	return cols;
}
