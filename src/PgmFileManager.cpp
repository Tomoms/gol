#include <fstream>
#include <iostream>
#include <limits>
#include <vector>
#include <PgmFileManager.hpp>

PgmFileManager::PgmFileManager(std::string& filename, unsigned long size):
filename_{filename}, rows_{size}, cols_{size}
{}

PgmFileManager::PgmFileManager(std::string& filename):
filename_{filename}
{
	{
		std::ifstream instream(filename.c_str(), std::ios_base::binary);
		std::string magic;
		instream >> magic >> rows_ >> cols_;
	}

	image_data_.resize(rows_, std::vector<unsigned char>{});
	for (auto& row : image_data_) {
		row.resize(cols_, 0);
	}

	{
		std::ifstream instream(filename.c_str(), std::ios_base::binary);
		instream.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
		for (auto i = 0UL; i < rows_; i++) {
			instream.read(reinterpret_cast<char*>(&image_data_[i][0]), cols_);
		}
	}
}

void PgmFileManager::write()
{
	std::ofstream outstream{filename_.c_str(), std::ios_base::binary | std::ios_base::trunc};
	outstream << "P5 " << cols_ << " " << rows_ << " " << PGM_MAX_VALUE << std::endl;

	const PGM_HOLDER image{
		{
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
			{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}
		}
	};

	for (auto i = 0UL; i < rows_; i++) {
		outstream.write(reinterpret_cast<const char*>(&image[i][0]), cols_);
	}
}

unsigned long PgmFileManager::get_rows()
{
	return rows_;
}

unsigned long PgmFileManager::get_cols()
{
	return cols_;
}

PGM_HOLDER& PgmFileManager::get_image_data()
{
	return image_data_;
}

